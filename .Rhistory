dplyr::rename(Location = Split_location)
remaining <- results_consensus %>%
filter(!(Var1 %in% clear_location$Var1)) %>%
filter(!(Var1 %in% fourty_percent$Var1)) %>%
mutate(Location = NA) %>%
mutate(Confidence = "None") %>%
dplyr::select(Var1, Location, Confidence) %>%
unique()
##Change confidence from high group to high and Medium
final_results <- rbind(clear_location, low_confidence, remaining)
final_results <- final_results %>%
arrange(Confidence)
tmp <- data.frame(table(final_results$Location))
table(final_results$Location, final_results$Confidence)
write_csv(final_results, "Supp tables/S3_SVM_assignments.csv")
table(final_results$Confidence)
head(final_results)
library(org.Hs.eg.db)
uniKeys <- keys(org.Hs.eg.db, keytype="UNIPROT")
cols <- c("SYMBOL")
conversion_Ref <- select(org.Hs.eg.db, keys=uniKeys, columns=cols, keytype="UNIPROT")
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Endoplasmic Reticulum" & Confidence == "High", 0.01, 1))
library(topGO)
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_ER <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_ER$SVM_fraction <- "ER"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Plasma membrane" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_Plas_memb <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_Plas_memb$SVM_fraction <- "Plasma membrane"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Cytoplasm" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_cytoplasm <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_cytoplasm$SVM_fraction <- "Cytoplasm"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Cytoskeleton" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_cytoskel <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_cytoskel$SVM_fraction <- "Cytoskeleton"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Nucleus" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_nuc <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_nuc$SVM_fraction <- "Nucleus"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Mitochondria" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_mito <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_mito$SVM_fraction <- "Mitochondria"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Postsynapse" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_post <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_post$SVM_fraction <- "Postsynapse"
results <- final_results %>%
dplyr::rename(UNIPROT = Var1) %>%
left_join(conversion_Ref)%>%
mutate(sig_val = ifelse(Location == "Presynapse" & Confidence == "High", 0.01, 1))
#Convert to vector
allGenes_input <- setNames(as.numeric(results$sig_val), results$SYMBOL)
#Build function to dplyr::select Geneset (significant genes)
selFun <- function(x){return(x < 0.05)}
#Build GO data object - for biological process
GO_data_CC <- new("topGOdata",
ontology = "CC",
allGenes = allGenes_input,
geneSel = selFun,
annot = annFUN.org,
mapping = "org.Hs.eg.db",
ID = "symbol"
)
CC_result <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_results_pre <- GenTable(GO_data_CC, classicFisher = CC_result, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 5)
CC_results_pre$SVM_fraction <- "Presynapse"
All_CC_results <- rbind(CC_results_cytoplasm, CC_results_cytoskel, CC_results_ER, CC_results_mito, CC_results_nuc, CC_results_Plas_memb, CC_results_post, CC_results_pre)
write_csv(All_CC_results, "Supp tables/Table1_high_confidence_GO_enrichment.csv")
All_CC_results
SampleB <- for_SVM %>%
dplyr::filter(Sample == "B") %>%
dplyr::select(-Sample) %>%
column_to_rownames(var = "Fraction")
SampleB <- t(SampleB)
SampleB <- data.frame(SampleB) %>%
rownames_to_column() %>%
dplyr::rename(UniprotID = rowname)
SampleBmerged <- merge(SampleB, marker_list1, by.x = "UniprotID",by.y = "ProteinID",  all.x = TRUE)
tmp <- data.frame(table(SampleBmerged$Location)) %>%
filter(Freq >35)
SampleBtrain <- SampleBmerged %>%
dplyr::filter(!is.na(Location)) %>%
dplyr::filter(Location %in% tmp$Var1) %>%
column_to_rownames(var = "UniprotID")
set.seed(2409)
down_SampleB <- downSample(x = SampleBtrain, y = as.factor(SampleBtrain$Location))
down_SampleB <- down_SampleB %>%
dplyr::select(-Class)
trControl <- trainControl("cv", number = 10, returnData = TRUE)
set.seed(2709)
svM_B <- train(Location ~ ., data = down_SampleB, method = "svmRadial", trControl = trControl, preProcess = c("center","scale"), tuneLength = 10)
svM_B$bestTune
svM_B
conf <- confusionMatrix(svM_B)
conf <- conf$table
Cytoplasm2 <- (conf[1,1] / sum(conf[,1])) *100
Cytoskeleton2 <- (conf[2,2] / sum(conf[,2])) *100
`Endoplasmic Reticulum2` <- (conf[3,3] / sum(conf[,3])) *100
Mitochondria2 <- (conf[4,4] / sum(conf[,4])) *100
Nucleus2 <- (conf[5,5] / sum(conf[,5])) *100
`Plasma membrane2` <- (conf[6,6] / sum(conf[,6])) *100
Postsynapse2<- (conf[7,7] / sum(conf[,7])) *100
Presynapse2 <- (conf[8,8] / sum(conf[,8])) *100
results <- data.frame(Organelle = c("Cytoplasm", "Cytoskeleton", "Endoplasmic Reticulum", "Mitochondria", "Nucleus", "Plasma membrane", "Postsynapse", "Presynapse"), SampleB = c(Cytoplasm2, Cytoskeleton2, `Endoplasmic Reticulum2`, Mitochondria2, Nucleus2, `Plasma membrane2`, Postsynapse2, Presynapse2))
conf
SampleD <- for_SVM %>%
filter(Sample == "D") %>%
dplyr::select(-Sample) %>%
column_to_rownames(var = "Fraction")
SampleD <- t(SampleD)
SampleD <- data.frame(SampleD) %>%
rownames_to_column() %>%
dplyr::rename(UniprotID = rowname)
SampleDmerged <- merge(SampleD, marker_list1, by.x = "UniprotID",by.y = "ProteinID",  all.x = TRUE)
SampleDtrain <- SampleDmerged %>%
dplyr::filter(!is.na(Location)) %>%
dplyr::filter(Location %in% tmp$Var1) %>%
column_to_rownames(var = "UniprotID")
down_SampleD <- downSample(x = SampleDtrain, y = as.factor(SampleDtrain$Location))
down_SampleD <- down_SampleD %>%
dplyr::select(-Class)
trControl <- trainControl("cv", number = 10, returnData = TRUE)
set.seed(2709)
svM_D <- train(Location ~ ., data = down_SampleD, method = "svmRadial", trControl = trControl, preProcess = c("center","scale"), tuneLength = 10)
svM_D$bestTune
svM_D
conf <- confusionMatrix(svM_D)
conf <- conf$table
Cytoplasm <- (conf[1,1] / sum(conf[,1])) *100
Cytoskeleton <- (conf[2,2] / sum(conf[,2])) *100
`Endoplasmic Reticulum` <- (conf[3,3] / sum(conf[,3])) *100
Mitochondria <- (conf[4,4] / sum(conf[,4])) *100
Nucleus <- (conf[5,5] / sum(conf[,5])) *100
`Plasma membrane` <- (conf[6,6] / sum(conf[,6])) *100
Postsynapse<- (conf[7,7] / sum(conf[,7])) *100
Presynapse <- (conf[8,8] / sum(conf[,8])) *100
results$SampleD <- c(Cytoplasm, Cytoskeleton, `Endoplasmic Reticulum`, Mitochondria, Nucleus, `Plasma membrane`, Postsynapse, Presynapse)
results
SampleF <- for_SVM %>%
filter(Sample == "F") %>%
dplyr::select(-Sample) %>%
column_to_rownames(var = "Fraction")
SampleF <- t(SampleF)
SampleF <- data.frame(SampleF) %>%
rownames_to_column() %>%
dplyr::rename(UniprotID = rowname)
SampleFmerged <- merge(SampleF, marker_list1, by.x = "UniprotID",by.y = "ProteinID",  all.x = TRUE)
SampleFtrain <- SampleFmerged %>%
dplyr::filter(!is.na(Location)) %>%
dplyr::filter(Location %in% tmp$Var1) %>%
column_to_rownames(var = "UniprotID")
down_SampleF <- downSample(x = SampleFtrain, y = as.factor(SampleFtrain$Location))
down_SampleF <- down_SampleF %>%
dplyr::select(-Class)
trControl <- trainControl("cv", number = 10, returnData = TRUE)
svM_F <- train(Location ~ ., data = down_SampleF, method = "svmRadial", trControl = trControl, preProcess = c("center","scale"), tuneLength = 10)
svM_F$bestTune
svM_F
conf <- confusionMatrix(svM_F)
conf <- conf$table
Cytoplasm <- (conf[1,1] / sum(conf[,1])) *100
Cytoskeleton <- (conf[2,2] / sum(conf[,2])) *100
`Endoplasmic Reticulum` <- (conf[3,3] / sum(conf[,3])) *100
Mitochondria <- (conf[4,4] / sum(conf[,4])) *100
Nucleus <- (conf[5,5] / sum(conf[,5])) *100
`Plasma membrane` <- (conf[6,6] / sum(conf[,6])) *100
Postsynapse<- (conf[7,7] / sum(conf[,7])) *100
Presynapse <- (conf[8,8] / sum(conf[,8])) *100
results$SampleF <- c(Cytoplasm, Cytoskeleton, `Endoplasmic Reticulum`, Mitochondria, Nucleus, `Plasma membrane`, Postsynapse, Presynapse)
results
SampleH <- for_SVM %>%
filter(Sample == "H") %>%
dplyr::select(-Sample) %>%
column_to_rownames(var = "Fraction")
SampleH <- t(SampleH)
SampleH <- data.frame(SampleH) %>%
rownames_to_column() %>%
dplyr::rename(UniprotID = rowname)
SampleHmerged <- merge(SampleH, marker_list1, by.x = "UniprotID",by.y = "ProteinID",  all.x = TRUE)
SampleHtrain <- SampleHmerged %>%
dplyr::filter(!is.na(Location)) %>%
dplyr::filter(Location %in% tmp$Var1) %>%
column_to_rownames(var = "UniprotID")
down_SampleH <- downSample(x = SampleHtrain, y = as.factor(SampleHtrain$Location))
down_SampleH <- down_SampleH %>%
dplyr::select(-Class)
trControl <- trainControl("cv", number = 10, returnData = TRUE)
svM_H <- train(Location ~ ., data = down_SampleH, method = "svmRadial", trControl = trControl, preProcess = c("center","scale"), tuneLength = 10)
svM_H$bestTune
svM_H
conf <- confusionMatrix(svM_H)
conf <- conf$table
Cytoplasm <- (conf[1,1] / sum(conf[,1])) *100
Cytoskeleton <- (conf[2,2] / sum(conf[,2])) *100
`Endoplasmic Reticulum` <- (conf[3,3] / sum(conf[,3])) *100
Mitochondria <- (conf[4,4] / sum(conf[,4])) *100
Nucleus <- (conf[5,5] / sum(conf[,5])) *100
`Plasma membrane` <- (conf[6,6] / sum(conf[,6])) *100
Postsynapse<- (conf[7,7] / sum(conf[,7])) *100
Presynapse <- (conf[8,8] / sum(conf[,8])) *100
results$SampleH <- c(Cytoplasm, Cytoskeleton, `Endoplasmic Reticulum`, Mitochondria, Nucleus, `Plasma membrane`, Postsynapse, Presynapse)
results
SampleJ <- for_SVM %>%
filter(Sample == "J") %>%
dplyr::select(-Sample) %>%
column_to_rownames(var = "Fraction")
SampleJ <- t(SampleJ)
SampleJ <- data.frame(SampleJ) %>%
rownames_to_column() %>%
dplyr::rename(UniprotID = rowname)
SampleJmerged <- merge(SampleJ, marker_list1, by.x = "UniprotID",by.y = "ProteinID",  all.x = TRUE)
SampleJtrain <- SampleJmerged %>%
dplyr::filter(!is.na(Location)) %>%
dplyr::filter(Location %in% tmp$Var1) %>%
column_to_rownames(var = "UniprotID")
down_SampleJ <- downSample(x = SampleJtrain, y = as.factor(SampleJtrain$Location))
down_SampleJ <- down_SampleJ %>%
dplyr::select(-Class)
trControl <- trainControl("cv", number = 10, returnData = TRUE)
svM_J <- train(Location ~ ., data = down_SampleJ, method = "svmRadial", trControl = trControl, preProcess = c("center","scale"), tuneLength = 10)
svM_J$bestTune
svM_J
conf <- confusionMatrix(svM_J)
conf <- conf$table
Cytoplasm <- (conf[1,1] / sum(conf[,1])) *100
Cytoskeleton <- (conf[2,2] / sum(conf[,2])) *100
`Endoplasmic Reticulum` <- (conf[3,3] / sum(conf[,3])) *100
Mitochondria <- (conf[4,4] / sum(conf[,4])) *100
Nucleus <- (conf[5,5] / sum(conf[,5])) *100
`Plasma membrane` <- (conf[6,6] / sum(conf[,6])) *100
Postsynapse<- (conf[7,7] / sum(conf[,7])) *100
Presynapse <- (conf[8,8] / sum(conf[,8])) *100
results$SampleJ <- c(Cytoplasm, Cytoskeleton, `Endoplasmic Reticulum`, Mitochondria, Nucleus, `Plasma membrane`, Postsynapse, Presynapse)
AD_train_results <- results %>%
mutate(mean_perf = (SampleB + SampleD + SampleF + SampleH + SampleJ)/5)
AD_train_results
write_csv(AD_train_results, "tmp/control_classification_results_AD.csv")
Con_results_long <- Con_train_results %>%
dplyr::select(-mean_perf) %>%
pivot_longer(-Organelle, names_to = "Sample", values_to = "performance") %>%
separate(Sample, sep = 6, into = c(NA, "Subject"), remove = FALSE)
All_results_long <- AD_train_results %>%
dplyr::select(-mean_perf) %>%
pivot_longer(-Organelle, names_to = "Sample", values_to = "performance") %>%
separate(Sample, sep = 6, into = c(NA, "Subject"), remove = FALSE) %>%
bind_rows(Con_results_long) %>%
left_join(sample_key)
SVM_train_condition <- ggplot(All_results_long, aes(x=Organelle, y = performance, fill = Condition)) +
geom_boxplot() + theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggsave("Figures/FigS4A_SVM_performance.pdf", plot = SVM_train_condition, device = "pdf", width = 8.5, height = 4, units = "in", dpi = 300)
SVM_train_condition
dummy_df <- data.frame(Organelle = c("Endolysosome", "Golgi Apparatus", "Peroxisome"), PMI = c(NA, NA, NA), performance = c(NA, NA, NA))
PMI <- All_results_long %>%
group_by(Organelle, PMI) %>%
summarise(performance = mean(performance)) %>%
bind_rows(dummy_df) %>%
ggplot(aes(x = as.factor(PMI), y = performance, group = Organelle, color = Organelle)) + geom_line() +
xlab("PMI (hours)") + scale_color_brewer(palette = "Set3") + theme_bw()
ggsave("Figures/FigS4B_PMI_performance.pdf", plot = PMI, device = "pdf", width = 8.5, height = 4, units = "in", dpi = 300)
PMI
lm_condition <- lm(performance ~ Condition + Age + PMI + Organelle, data = All_results_long)
summary(lm_condition)
all_results_summary <- All_results_long %>%
group_by(Organelle) %>%
summarise(mean = mean(performance))
##Prediction for the rest of the proteins
```{r}
all_results_summary <- All_results_long %>%
group_by(Organelle) %>%
summarise(mean = mean(performance))
head(All_results_long)
all_results_summary <- All_results_long %>%
group_by(Organelle) %>%
summarise(mean = mean(performance))
##Prediction for the rest of the proteins
##Filter out training proteins
SampleBtest <- SampleBmerged %>%
anti_join(down_SampleB) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleBtest$predicted.locations_B <- predict(svM_B, newdata = SampleBtest)
SampleBtest <- SampleBtest %>%
rownames_to_column()
table(SampleBtest$predicted.locations_B)
lm_condition <- lm(performance ~ Condition + Age + PMI + Organelle, data = All_results_long)
summary(lm_condition)
all_results_summary <- All_results_long %>%
group_by(Organelle) %>%
summarise(mean = mean(performance))
##Prediction for the rest of the proteins
##Filter out training proteins
SampleBtest <- SampleBmerged %>%
anti_join(down_SampleB) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleBtest$predicted.locations_B <- predict(svM_B, newdata = SampleBtest)
SampleBtest <- SampleBtest %>%
rownames_to_column()
table(SampleBtest$predicted.locations_B)
##Filter out training proteins
SampleDtest <- SampleDmerged %>%
anti_join(down_SampleD) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleDtest$predicted.locations_D <- predict(svM_D, newdata = SampleDtest)
SampleDtest <- SampleDtest %>%
rownames_to_column()
##Filter out training proteins
SampleFtest <- SampleFmerged %>%
anti_join(down_SampleF) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleFtest$predicted.locations_F <- predict(svM_F, newdata = SampleFtest)
SampleFtest <- SampleFtest %>%
rownames_to_column()
##Filter out training proteins
SampleHtest <- SampleHmerged %>%
anti_join(down_SampleH) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleHtest$predicted.locations_H <- predict(svM_H, newdata = SampleHtest)
SampleHtest <- SampleHtest %>%
rownames_to_column()
##Filter out training proteins
SampleJtest <- SampleJmerged %>%
anti_join(down_SampleJ) %>%
dplyr::select(-Location) %>%
column_to_rownames(var = "UniprotID")
SampleJtest$predicted.locations_J <- predict(svM_J, newdata = SampleJtest)
SampleJtest <- SampleJtest %>%
rownames_to_column()
tmpB <- SampleBtest %>%
dplyr::select(rowname, predicted.locations_B)
tmpD <- SampleDtest %>%
dplyr::select(rowname, predicted.locations_D)
tmpF <- SampleFtest %>%
dplyr::select(rowname, predicted.locations_F)
tmpH <- SampleHtest %>%
dplyr::select(rowname, predicted.locations_H)
tmpJ <- SampleJtest %>%
dplyr::select(rowname, predicted.locations_J)
test_results <- merge(tmpB, tmpD, by = "rowname", all = TRUE)
test_results <- merge(test_results, tmpF, by = "rowname", all = TRUE)
test_results <- merge(test_results, tmpH, by = "rowname", all = TRUE)
test_results <- merge(test_results, tmpJ, by = "rowname", all = TRUE)
test_results$N <- apply(!is.na(test_results[,2:6]), 1, sum)
n_group <- test_results %>%
dplyr::select(rowname, N)
tmp <- test_results %>%
pivot_longer(-c(rowname, N), names_to = "Sample", values_to = "Location")
tmp <- data.frame(table(tmp$rowname, tmp$Location))
results_consensus <- tmp %>%
group_by(Var1) %>%
slice_max(Freq)
results_consensus <- merge(results_consensus, n_group, by.x = "Var1", by.y = "rowname")
results_consensus <- results_consensus %>%
mutate(prop = (Freq/N)*100)
clear_location <- results_consensus %>%
filter(prop > 50) %>%
mutate(Confidence = ifelse(prop > 70, "High", "Medium")) %>%
dplyr::select(Var1, Var2, Confidence) %>%
dplyr::rename(Location = Var2)
ties <- results_consensus %>%
filter(!(Var1 %in% clear_location$Var1)) %>%
arrange(Var1)
fourty_percent <- ties %>%
filter(prop >= 40) %>%
group_by(Var1) %>%
mutate(id = row_number()) %>%
dplyr::select(Var1, id, Var2) %>%
arrange(Var2) %>%
pivot_wider(names_from = id, values_from = Var2) %>%
dplyr::rename(Location_1 = `1`, Location_2 = `2`) %>%
unite("Split_location", Location_1:Location_2, remove = FALSE)
fourty_percent$Split_location <- gsub("_NA", "", fourty_percent$Split_location)
low_confidence <- fourty_percent %>%
mutate(Confidence = "Low") %>%
dplyr::select(Var1, Split_location, Confidence) %>%
dplyr::rename(Location = Split_location)
remaining <- results_consensus %>%
filter(!(Var1 %in% clear_location$Var1)) %>%
filter(!(Var1 %in% fourty_percent$Var1)) %>%
mutate(Location = NA) %>%
mutate(Confidence = "None") %>%
dplyr::select(Var1, Location, Confidence) %>%
unique()
##Change confidence from high group to high and Medium
AD_final_results <- rbind(clear_location, low_confidence, remaining)
tmp <- data.frame(table(AD_final_results$Location))
table(AD_final_results$Location, final_results$Confidence)
final_results$Condition <- "Control"
AD_final_results$Condition <- "AD"
all_SVM_results <- rbind(final_results, AD_final_results)
write_csv(all_SVM_results, "tmp/SVM_results.csv")
head(all_SVM_results)
